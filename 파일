// Enhanced SillyTavern Theme Loader Extension
// 향상된 테마 로더 - 배경 효과와 특수 기능 포함

(function() {
    'use strict';
    
    const extensionName = 'Enhanced Theme Loader';
    const extensionFolderPath = 'scripts/extensions/third-party/theme-loader';
    
    // 현재 테마 상태
    let currentTheme = null;
    let customCSS = null;
    let activeEffects = new Set();
    let particlesInstance = null;
    
    // 확장 프로그램 초기화
    async function init() {
        console.log(`[${extensionName}] Initializing...`);
        
        // UI 패널 생성
        createThemePanel();
        
        // 특수 효과 스크립트 로드
        await loadEffectScripts();
        
        // 저장된 설정 불러오기
        loadSavedSettings();
        
        console.log(`[${extensionName}] Initialized successfully!`);
    }
    
    // 향상된 테마 관리 패널 생성
    function createThemePanel() {
        const settingsHtml = `
            <div class="enhanced-theme-loader-settings">
                <div class="inline-drawer">
                    <div class="inline-drawer-toggle inline-drawer-header">
                        <b>Enhanced Theme Loader</b>
                        <div class="inline-drawer-icon fa-solid fa-circle-chevron-down down"></div>
                    </div>
                    <div class="inline-drawer-content">
                        <div class="theme-loader-controls">
                            <!-- 기본 테마 선택 -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-palette"></i> Theme Selection</h4>
                                <select id="theme-select" class="text_pole">
                                    <option value="default">Default Theme</option>
                                    <option value="time-traveler">Time Traveler Vintage</option>
                                    <option value="cyberpunk">Cyberpunk Neon</option>
                                    <option value="fantasy">Fantasy Realm</option>
                                    <option value="minimalist">Minimalist Clean</option>
                                </select>
                                <button id="apply-theme-btn" class="menu_button">
                                    <i class="fa-solid fa-paint-brush"></i> Apply Theme
                                </button>
                            </div>
                            
                            <!-- 배경 효과 설정 -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-image"></i> Background Effects</h4>
                                <div class="effect-options">
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="parallax-bg" class="effect-toggle">
                                        <span>Parallax Background</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="animated-gradient" class="effect-toggle">
                                        <span>Animated Gradient</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="particle-effects" class="effect-toggle">
                                        <span>Particle Effects</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="blur-effect" class="effect-toggle">
                                        <span>Blur Glass Effect</span>
                                    </label>
                                </div>
                                
                                <div class="background-upload">
                                    <label>Custom Background Image:</label>
                                    <input type="file" id="bg-image-input" accept="image/*">
                                    <input type="text" id="bg-url-input" class="text_pole" placeholder="Or enter image URL...">
                                    <button id="apply-bg-btn" class="menu_button">
                                        <i class="fa-solid fa-image"></i> Set Background
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 특수 효과 설정 -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-wand-magic-sparkles"></i> Special Effects</h4>
                                <div class="effect-options">
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="typing-effect" class="effect-toggle">
                                        <span>Typewriter Effect</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="message-animations" class="effect-toggle">
                                        <span>Message Animations</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="sound-effects" class="effect-toggle">
                                        <span>Sound Effects</span>
                                    </label>
                                    <label class="checkbox_label">
                                        <input type="checkbox" id="time-stamps" class="effect-toggle">
                                        <span>Vintage Timestamps</span>
                                    </label>
                                </div>
                            </div>
                            
                            <!-- 색상 커스터마이징 -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-sliders"></i> Color Customization</h4>
                                <div class="color-inputs">
                                    <div class="color-input-group">
                                        <label>Primary Color:</label>
                                        <input type="color" id="primary-color" class="color-picker">
                                    </div>
                                    <div class="color-input-group">
                                        <label>Background Color:</label>
                                        <input type="color" id="bg-color" class="color-picker">
                                    </div>
                                    <div class="color-input-group">
                                        <label>Text Color:</label>
                                        <input type="color" id="text-color" class="color-picker">
                                    </div>
                                    <button id="apply-colors-btn" class="menu_button">
                                        <i class="fa-solid fa-fill-drip"></i> Apply Colors
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 고급 CSS -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-code"></i> Advanced CSS</h4>
                                <textarea id="custom-css" class="text_pole" rows="10" 
                                    placeholder="/* Add your custom CSS here with !important for override */"></textarea>
                                <div class="css-helpers">
                                    <button class="css-helper-btn" data-css="!important">!important</button>
                                    <button class="css-helper-btn" data-css="rgba(0,0,0,0.5)">RGBA</button>
                                    <button class="css-helper-btn" data-css="linear-gradient()">Gradient</button>
                                    <button class="css-helper-btn" data-css="blur(10px)">Blur</button>
                                </div>
                                <button id="apply-custom-css-btn" class="menu_button">
                                    <i class="fa-solid fa-code"></i> Apply CSS
                                </button>
                            </div>
                            
                            <!-- 테마 임포트/익스포트 -->
                            <div class="theme-section">
                                <h4><i class="fa-solid fa-file-import"></i> Import/Export</h4>
                                <input type="file" id="theme-file-input" accept=".json">
                                <button id="import-theme-btn" class="menu_button">
                                    <i class="fa-solid fa-file-import"></i> Import Theme
                                </button>
                                <button id="export-theme-btn" class="menu_button">
                                    <i class="fa-solid fa-file-export"></i> Export Current
                                </button>
                            </div>
                            
                            <!-- 액션 버튼 -->
                            <div class="theme-actions">
                                <button id="preview-theme-btn" class="menu_button">
                                    <i class="fa-solid fa-eye"></i> Preview
                                </button>
                                <button id="reset-theme-btn" class="menu_button">
                                    <i class="fa-solid fa-undo"></i> Reset All
                                </button>
                            </div>
                            
                            <div class="theme-info">
                                <p id="theme-status">Ready to customize</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // 향상된 스타일
        const style = document.createElement('style');
        style.textContent = `
            /* Enhanced Theme Loader Styles */
            .enhanced-theme-loader-settings {
                margin: 10px 0;
            }
            
            .theme-loader-controls {
                display: flex;
                flex-direction: column;
                gap: 20px;
                padding: 15px;
            }
            
            .theme-section {
                background: rgba(0, 0, 0, 0.05);
                padding: 15px;
                border-radius: 8px;
                border: 1px solid rgba(0, 0, 0, 0.1);
            }
            
            .theme-section h4 {
                margin: 0 0 15px 0;
                color: var(--SmartThemeBodyColor);
                font-size: 16px;
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .theme-section h4 i {
                font-size: 14px;
                opacity: 0.7;
            }
            
            .effect-options {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 10px;
                margin-bottom: 15px;
            }
            
            .checkbox_label {
                display: flex;
                align-items: center;
                gap: 8px;
                cursor: pointer;
                padding: 5px;
                border-radius: 4px;
                transition: background 0.2s;
            }
            
            .checkbox_label:hover {
                background: rgba(0, 0, 0, 0.05);
            }
            
            .color-inputs {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
                margin-bottom: 10px;
            }
            
            .color-input-group {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }
            
            .color-picker {
                width: 100%;
                height: 40px;
                border: 1px solid var(--SmartThemeBorderColor);
                border-radius: 4px;
                cursor: pointer;
            }
            
            .background-upload {
                display: flex;
                flex-direction: column;
                gap: 10px;
                margin-top: 15px;
            }
            
            .css-helpers {
                display: flex;
                gap: 5px;
                margin: 10px 0;
                flex-wrap: wrap;
            }
            
            .css-helper-btn {
                padding: 5px 10px;
                font-size: 12px;
                background: var(--SmartThemeBlurTintColor);
                border: 1px solid var(--SmartThemeBorderColor);
                border-radius: 4px;
                cursor: pointer;
                transition: all 0.2s;
            }
            
            .css-helper-btn:hover {
                background: var(--SmartThemeBodyColor);
                color: var(--SmartThemeBlurTintColor);
            }
            
            .theme-actions {
                display: flex;
                gap: 10px;
                justify-content: center;
                flex-wrap: wrap;
            }
            
            #custom-css {
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 13px;
                line-height: 1.5;
            }
            
            /* 특수 효과를 위한 기본 스타일 */
            .parallax-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                overflow: hidden;
                z-index: -1;
            }
            
            .particle-canvas {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 1;
            }
            
            @keyframes gradientShift {
                0% { background-position: 0% 50%; }
                50% { background-position: 100% 50%; }
                100% { background-position: 0% 50%; }
            }
            
            .animated-gradient-bg {
                background: linear-gradient(270deg, #667eea, #764ba2, #f093fb, #4facfe);
                background-size: 800% 800%;
                animation: gradientShift 15s ease infinite;
            }
            
            /* 타입라이터 효과 */
            @keyframes typewriter {
                from { width: 0; }
                to { width: 100%; }
            }
            
            .typewriter-effect {
                overflow: hidden;
                white-space: nowrap;
                animation: typewriter 2s steps(40, end);
            }
            
            /* 메시지 애니메이션 */
            @keyframes slideInLeft {
                from {
                    opacity: 0;
                    transform: translateX(-30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
            
            @keyframes slideInRight {
                from {
                    opacity: 0;
                    transform: translateX(30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
            
            .message-animation-left {
                animation: slideInLeft 0.5s ease-out;
            }
            
            .message-animation-right {
                animation: slideInRight 0.5s ease-out;
            }
        `;
        document.head.appendChild(style);
        
        // Extensions 패널에 추가
        const extensionsPanel = document.getElementById('extensions_settings');
        if (extensionsPanel) {
            const themeLoaderDiv = document.createElement('div');
            themeLoaderDiv.innerHTML = settingsHtml;
            extensionsPanel.appendChild(themeLoaderDiv);
            
            // 이벤트 리스너 설정
            setupEventListeners();
        }
    }
    
    // 이벤트 리스너 설정
    function setupEventListeners() {
        // 기본 버튼들
        document.getElementById('apply-theme-btn').addEventListener('click', applySelectedTheme);
        document.getElementById('reset-theme-btn').addEventListener('click', resetAll);
        document.getElementById('apply-custom-css-btn').addEventListener('click', applyCustomCSS);
        document.getElementById('import-theme-btn').addEventListener('click', importTheme);
        document.getElementById('export-theme-btn').addEventListener('click', exportCurrentTheme);
        document.getElementById('preview-theme-btn').addEventListener('click', previewTheme);
        document.getElementById('apply-bg-btn').addEventListener('click', applyBackground);
        document.getElementById('apply-colors-btn').addEventListener('click', applyColors);
        
        // 효과 토글들
        document.querySelectorAll('.effect-toggle').forEach(toggle => {
            toggle.addEventListener('change', (e) => toggleEffect(e.target.id, e.target.checked));
        });
        
        // CSS 헬퍼 버튼들
        document.querySelectorAll('.css-helper-btn').forEach(btn => {
            btn.addEventListener('click', (e) => insertCSSHelper(e.target.dataset.css));
        });
        
        // 드로어 토글
        const drawerToggle = document.querySelector('.enhanced-theme-loader-settings .inline-drawer-toggle');
        drawerToggle.addEventListener('click', function() {
            this.classList.toggle('up');
            const icon = this.querySelector('.inline-drawer-icon');
            icon.classList.toggle('up');
            icon.classList.toggle('down');
            const content = this.nextElementSibling;
            content.style.display = content.style.display === 'none' ? 'block' : 'none';
        });
    }
    
    // 특수 효과 토글
    function toggleEffect(effectId, enabled) {
        if (enabled) {
            activeEffects.add(effectId);
            applyEffect(effectId);
        } else {
            activeEffects.delete(effectId);
            removeEffect(effectId);
        }
        saveSettings();
    }
    
    // 효과 적용
    function applyEffect(effectId) {
        switch(effectId) {
            case 'parallax-bg':
                createParallaxBackground();
                break;
            case 'animated-gradient':
                document.body.classList.add('animated-gradient-bg');
                break;
            case 'particle-effects':
                createParticleEffects();
                break;
            case 'blur-effect':
                applyBlurEffect();
                break;
            case 'typing-effect':
                enableTypingEffect();
                break;
            case 'message-animations':
                enableMessageAnimations();
                break;
            case 'sound-effects':
                enableSoundEffects();
                break;
            case 'time-stamps':
                enableVintageTimestamps();
                break;
        }
    }
    
    // 효과 제거
    function removeEffect(effectId) {
        switch(effectId) {
            case 'parallax-bg':
                removeParallaxBackground();
                break;
            case 'animated-gradient':
                document.body.classList.remove('animated-gradient-bg');
                break;
            case 'particle-effects':
                removeParticleEffects();
                break;
            case 'blur-effect':
                removeBlurEffect();
                break;
            case 'typing-effect':
                disableTypingEffect();
                break;
            case 'message-animations':
                disableMessageAnimations();
                break;
            case 'sound-effects':
                disableSoundEffects();
                break;
            case 'time-stamps':
                disableVintageTimestamps();
                break;
        }
    }
    
    // 패럴랙스 배경 생성
    function createParallaxBackground() {
        const container = document.createElement('div');
        container.className = 'parallax-container';
        container.innerHTML = `
            <div class="parallax-layer" data-speed="0.5"></div>
            <div class="parallax-layer" data-speed="0.8"></div>
            <div class="parallax-layer" data-speed="1"></div>
        `;
        document.body.appendChild(container);
        
        // 패럴랙스 효과 적용
        window.addEventListener('scroll', handleParallax);
    }
    
    function handleParallax() {
        const scrolled = window.scrollY;
        const layers = document.querySelectorAll('.parallax-layer');
        layers.forEach(layer => {
            const speed = layer.dataset.speed;
            layer.style.transform = `translateY(${scrolled * speed}px)`;
        });
    }
    
    function removeParallaxBackground() {
        const container = document.querySelector('.parallax-container');
        if (container) container.remove();
        window.removeEventListener('scroll', handleParallax);
    }
    
    // 파티클 효과 생성
    function createParticleEffects() {
        const canvas = document.createElement('canvas');
        canvas.className = 'particle-canvas';
        canvas.id = 'particles';
        document.body.appendChild(canvas);
        
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        const particles = [];
        const particleCount = 50;
        
        // 파티클 클래스
        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 2 - 1;
                this.speedY = Math.random() * 2 - 1;
                this.opacity = Math.random() * 0.5 + 0.5;
            }
            
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                
                if (this.x > canvas.width) this.x = 0;
                if (this.x < 0) this.x = canvas.width;
                if (this.y > canvas.height) this.y = 0;
                if (this.y < 0) this.y = canvas.height;
            }
            
            draw() {
                ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        // 파티클 생성
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }
        
        // 애니메이션 루프
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });
            particlesInstance = requestAnimationFrame(animate);
        }
        
        animate();
        
        // 리사이즈 처리
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
    }
    
    function removeParticleEffects() {
        const canvas = document.querySelector('.particle-canvas');
        if (canvas) canvas.remove();
        if (particlesInstance) {
            cancelAnimationFrame(particlesInstance);
            particlesInstance = null;
        }
    }
    
    // 블러 효과 적용
    function applyBlurEffect() {
        const style = document.createElement('style');
        style.id = 'blur-effect-style';
        style.textContent = `
            .main_container {
                backdrop-filter: blur(10px) !important;
                background: rgba(255, 255, 255, 0.1) !important;
            }
            
            .mes {
                backdrop-filter: blur(5px) !important;
                background: rgba(255, 255, 255, 0.1) !important;
            }
        `;
        document.head.appendChild(style);
    }
    
    function removeBlurEffect() {
        const style = document.getElementById('blur-effect-style');
        if (style) style.remove();
    }
    
    // 타이핑 효과
    function enableTypingEffect() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.classList && node.classList.contains('mes')) {
                        const textElement = node.querySelector('.mes_text');
                        if (textElement) {
                            textElement.classList.add('typewriter-effect');
                        }
                    }
                });
            });
        });
        
        observer.observe(document.getElementById('chat'), {
            childList: true,
            subtree: true
        });
        
        window.typingObserver = observer;
    }
    
    function disableTypingEffect() {
        if (window.typingObserver) {
            window.typingObserver.disconnect();
            delete window.typingObserver;
        }
    }
    
    // 메시지 애니메이션
    function enableMessageAnimations() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.classList && node.classList.contains('mes')) {
                        const isUser = node.getAttribute('data-is-user') === 'true';
                        node.classList.add(isUser ? 'message-animation-right' : 'message-animation-left');
                    }
                });
            });
        });
        
        observer.observe(document.getElementById('chat'), {
            childList: true,
            subtree: true
        });
        
        window.messageObserver = observer;
    }
    
    function disableMessageAnimations() {
        if (window.messageObserver) {
            window.messageObserver.disconnect();
            delete window.messageObserver;
        }
    }
    
    // 사운드 효과
    function enableSoundEffects() {
        // 메시지 전송 사운드
        const sendSound = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhB...');
        
        const originalSend = window.send || (() => {});
        window.send = function(...args) {
            sendSound.play();
            return originalSend.apply(this, args);
        };
    }
    
    function disableSoundEffects() {
        // 원래 함수로 복원
    }
    
    // 빈티지 타임스탬프
    function enableVintageTimestamps() {
        const style = document.createElement('style');
        style.id = 'vintage-timestamp-style';
        style.textContent = `
            .mes::after {
                content: attr(data-timestamp);
                position: absolute;
                bottom: 5px;
                right: 10px;
                font-size: 11px;
                opacity: 0.5;
                font-family: 'Courier New', monospace;
                color: var(--SmartThemeBodyColor);
            }
        `;
        document.head.appendChild(style);
        
        // 기존 메시지에 타임스탬프 추가
        document.querySelectorAll('.mes').forEach(addTimestamp);
        
        // 새 메시지 감지
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.classList && node.classList.contains('mes')) {
                        addTimestamp(node);
                    }
                });
            });
        });
        
        observer.observe(document.getElementById('chat'), {
            childList: true,
            subtree: true
        });
        
        window.timestampObserver = observer;
    }
    
    function addTimestamp(element) {
        const now = new Date();
        const timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
        element.setAttribute('data-timestamp', timestamp);
    }
    
    function disableVintageTimestamps() {
        const style = document.getElementById('vintage-timestamp-style');
        if (style) style.remove();
        
        if (window.timestampObserver) {
            window.timestampObserver.disconnect();
            delete window.timestampObserver;
        }
    }
    
    // 배경 적용
    function applyBackground() {
        const fileInput = document.getElementById('bg-image-input');
        const urlInput = document.getElementById('bg-url-input');
        
        let backgroundUrl = '';
        
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const reader = new FileReader();
            reader.onload = function(e) {
                backgroundUrl = e.target.result;
                setBackgroundImage(backgroundUrl);
            };
            reader.readAsDataURL(file);
        } else if (urlInput.value) {
            backgroundUrl = urlInput.value;
            setBackgroundImage(backgroundUrl);
        }
    }
    
    function setBackgroundImage(url) {
        const style = document.createElement('style');
        style.id = 'custom-background-style';
        style.textContent = `
            body {
                background-image: url('${url}') !important;
                background-size: cover !important;
                background-position: center !important;
                background-attachment: fixed !important;
            }
            
            .main_container {
                background: rgba(255, 255, 255, 0.9) !important;
            }
        `;
        
        const existing = document.getElementById('custom-background-style');
        if (existing) existing.remove();
        
        document.head.appendChild(style);
        updateStatus('Background applied successfully');
    }
    
    // 색상 적용
    function applyColors() {
        const primaryColor = document.getElementById('primary-color').value;
        const bgColor = document.getElementById('bg-color').value;
        const textColor = document.getElementById('text-color').value;
        
        const style = document.createElement('style');
        style.id = 'custom-colors-style';
        style.textContent = `
            :root {
                --custom-primary: ${primaryColor};
                --custom-bg: ${bgColor};
                --custom-text: ${textColor};
            }
            
            body {
                background-color: var(--custom-bg) !important;
                color: var(--custom-text) !important;
            }
            
            .mes[data-is-user="true"] {
                background: linear-gradient(135deg, ${primaryColor}22, ${primaryColor}33) !important;
                border-left-color: ${primaryColor} !important;
            }
            
            .menu_button, #send_button {
                background: ${primaryColor} !important;
            }
            
            a, .highlight {
                color: ${primaryColor} !important;
            }
        `;
        
        const existing = document.getElementById('custom-colors-style');
        if (existing) existing.remove();
        
        document.head.appendChild(style);
        updateStatus('Colors applied successfully');
        saveSettings();
    }
    
    // CSS 헬퍼 삽입
    function insertCSSHelper(helper) {
        const textarea = document.getElementById('custom-css');
        const cursorPos = textarea.selectionStart;
        const textBefore = textarea.value.substring(0, cursorPos);
        const textAfter = textarea.value.substring(cursorPos);
        
        textarea.value = textBefore + helper + textAfter;
        textarea.focus();
        textarea.setSelectionRange(cursorPos + helper.length, cursorPos + helper.length);
    }
    
    // 향상된 커스텀 CSS 적용
    function applyCustomCSS() {
        const customCSSTextarea = document.getElementById('custom-css');
        const cssText = customCSSTextarea.value;
        
        // 기존 커스텀 CSS 제거
        const existingCustomCSS = document.getElementById('custom-css-styles');
        if (existingCustomCSS) {
            existingCustomCSS.remove();
        }
        
        if (cssText.trim()) {
            // CSS 검증 및 자동 !important 추가 옵션
            const processedCSS = processCSSForPriority(cssText);
            
            const styleElement = document.createElement('style');
            styleElement.id = 'custom-css-styles';
            styleElement.textContent = processedCSS;
            document.head.appendChild(styleElement);
            
            customCSS = cssText;
            localStorage.setItem('customCSS', cssText);
            updateStatus('Custom CSS applied with enhanced priority');
        }
    }
    
    // CSS 우선순위 처리
    function processCSSForPriority(css) {
        // 자동으로 !important 추가하는 옵션 (사용자가 원할 경우)
        const autoImportant = confirm('Automatically add !important to all properties for maximum override?');
        
        if (autoImportant) {
            return css.replace(/([^;{}]+):\s*([^;{}]+);/g, (match, prop, value) => {
                if (!value.includes('!important')) {
                    return `${prop}: ${value} !important;`;
                }
                return match;
            });
        }
        
        return css;
    }
    
    // 테마 프리뷰
    function previewTheme() {
        const previewWindow = window.open('', 'Theme Preview', 'width=1200,height=800');
        
        if (previewWindow) {
            // 현재 페이지의 HTML 복사
            const currentHTML = document.documentElement.outerHTML;
            previewWindow.document.write(currentHTML);
            previewWindow.document.close();
            
            updateStatus('Preview opened in new window');
        }
    }
    
    // 현재 설정 익스포트
    function exportCurrentTheme() {
        const themeData = {
            name: 'Custom Theme Export',
            version: '1.0',
            timestamp: new Date().toISOString(),
            settings: {
                theme: document.getElementById('theme-select').value,
                effects: Array.from(activeEffects),
                colors: {
                    primary: document.getElementById('primary-color').value,
                    background: document.getElementById('bg-color').value,
                    text: document.getElementById('text-color').value
                },
                customCSS: document.getElementById('custom-css').value,
                backgroundImage: document.getElementById('bg-url-input').value
            }
        };
        
        const blob = new Blob([JSON.stringify(themeData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `sillytavern-theme-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        updateStatus('Theme exported successfully');
    }
    
    // 향상된 테마 임포트
    function importTheme() {
        const fileInput = document.getElementById('theme-file-input');
        const file = fileInput.files[0];
        
        if (!file) {
            updateStatus('Please select a theme file');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const themeData = JSON.parse(e.target.result);
                
                // 설정 적용
                if (themeData.settings) {
                    // 테마 선택
                    if (themeData.settings.theme) {
                        document.getElementById('theme-select').value = themeData.settings.theme;
                    }
                    
                    // 효과 적용
                    if (themeData.settings.effects) {
                        document.querySelectorAll('.effect-toggle').forEach(toggle => {
                            toggle.checked = themeData.settings.effects.includes(toggle.id);
                            toggleEffect(toggle.id, toggle.checked);
                        });
                    }
                    
                    // 색상 적용
                    if (themeData.settings.colors) {
                        document.getElementById('primary-color').value = themeData.settings.colors.primary || '#000000';
                        document.getElementById('bg-color').value = themeData.settings.colors.background || '#ffffff';
                        document.getElementById('text-color').value = themeData.settings.colors.text || '#000000';
                        applyColors();
                    }
                    
                    // 커스텀 CSS 적용
                    if (themeData.settings.customCSS) {
                        document.getElementById('custom-css').value = themeData.settings.customCSS;
                        applyCustomCSS();
                    }
                    
                    // 배경 이미지 적용
                    if (themeData.settings.backgroundImage) {
                        document.getElementById('bg-url-input').value = themeData.settings.backgroundImage;
                        applyBackground();
                    }
                }
                
                // 레거시 테마 형식 지원
                if (themeData.styles || themeData.variables) {
                    applyLegacyTheme(themeData);
                }
                
                updateStatus(`Imported theme: ${themeData.name || 'Custom Theme'}`);
            } catch (error) {
                console.error('Error importing theme:', error);
                updateStatus('Error: Invalid theme file');
            }
        };
        reader.readAsText(file);
    }
    
    // 레거시 테마 형식 적용
    function applyLegacyTheme(themeData) {
        let cssText = '';
        
        // CSS 변수 적용
        if (themeData.variables) {
            cssText += ':root {\n';
            for (const [key, value] of Object.entries(themeData.variables)) {
                cssText += `    ${key}: ${value};\n`;
            }
            cssText += '}\n\n';
        }
        
        // 스타일 규칙 적용
        if (themeData.styles) {
            for (const [selector, rules] of Object.entries(themeData.styles)) {
                cssText += `${selector} {\n`;
                for (const [property, value] of Object.entries(rules)) {
                    cssText += `    ${property}: ${value};\n`;
                }
                cssText += '}\n\n';
            }
        }
        
        // 키프레임 적용
        if (themeData.keyframes) {
            for (const [name, frames] of Object.entries(themeData.keyframes)) {
                cssText += `${name} {\n`;
                for (const [key, props] of Object.entries(frames)) {
                    cssText += `    ${key} {\n`;
                    for (const [prop, value] of Object.entries(props)) {
                        cssText += `        ${prop}: ${value};\n`;
                    }
                    cssText += `    }\n`;
                }
                cssText += '}\n\n';
            }
        }
        
        // 커스텀 CSS 텍스트 영역에 추가
        const customCSSTextarea = document.getElementById('custom-css');
        customCSSTextarea.value = cssText;
        applyCustomCSS();
    }
    
    // 전체 리셋
    function resetAll() {
        // 모든 효과 제거
        activeEffects.forEach(effect => {
            removeEffect(effect);
        });
        activeEffects.clear();
        
        // 모든 체크박스 해제
        document.querySelectorAll('.effect-toggle').forEach(toggle => {
            toggle.checked = false;
        });
        
        // 모든 커스텀 스타일 제거
        ['custom-theme-styles', 'custom-css-styles', 'custom-background-style', 
         'custom-colors-style', 'blur-effect-style', 'vintage-timestamp-style'].forEach(id => {
            const element = document.getElementById(id);
            if (element) element.remove();
        });
        
        // 입력 필드 초기화
        document.getElementById('theme-select').value = 'default';
        document.getElementById('custom-css').value = '';
        document.getElementById('bg-url-input').value = '';
        document.getElementById('primary-color').value = '#000000';
        document.getElementById('bg-color').value = '#ffffff';
        document.getElementById('text-color').value = '#000000';
        
        // 로컬 스토리지 클리어
        localStorage.removeItem('enhancedThemeSettings');
        
        currentTheme = null;
        customCSS = null;
        
        updateStatus('All settings reset to default');
    }
    
    // 선택된 테마 적용
    function applySelectedTheme() {
        const themeSelect = document.getElementById('theme-select');
        const selectedTheme = themeSelect.value;
        
        if (selectedTheme === 'default') {
            const existingStyle = document.getElementById('custom-theme-styles');
            if (existingStyle) existingStyle.remove();
            updateStatus('Default theme applied');
            return;
        }
        
        // 내장 테마 CSS
        const themes = {
            'time-traveler': getTimeTravelerTheme(),
            'cyberpunk': getCyberpunkTheme(),
            'fantasy': getFantasyTheme(),
            'minimalist': getMinimalistTheme()
        };
        
        if (themes[selectedTheme]) {
            applyThemeCSS(themes[selectedTheme]);
            updateStatus(`Applied theme: ${themeSelect.options[themeSelect.selectedIndex].text}`);
        }
        
        saveSettings();
    }
    
    // 테마 CSS 적용
    function applyThemeCSS(css) {
        const existingStyle = document.getElementById('custom-theme-styles');
        if (existingStyle) existingStyle.remove();
        
        const styleElement = document.createElement('style');
        styleElement.id = 'custom-theme-styles';
        styleElement.textContent = css;
        document.head.appendChild(styleElement);
    }
    
    // 시간여행자 테마
    function getTimeTravelerTheme() {
        return `
            :root {
                --bg-main: #f4e8d0;
                --bg-container: rgba(250, 242, 225, 0.95);
                --text-main: #3a2f26;
                --accent-gold: #d4a574;
                --accent-copper: #b87333;
            }
            
            body {
                background: var(--bg-main);
                font-family: 'Crimson Text', 'Garamond', serif;
            }
            
            .mes {
                background: linear-gradient(135deg, rgba(255, 245, 220, 0.8), rgba(252, 235, 195, 0.8));
                border: 1px solid rgba(205, 175, 130, 0.5);
                box-shadow: 0 4px 12px rgba(58, 47, 38, 0.15);
            }
        `;
    }
    
    // 사이버펑크 테마
    function getCyberpunkTheme() {
        return `
            :root {
                --bg-main: #0a0a0a;
                --text-main: #00ff41;
                --accent-neon: #ff00ff;
                --accent-cyber: #00ffff;
            }
            
            body {
                background: var(--bg-main);
                color: var(--text-main);
                font-family: 'Courier New', monospace;
            }
            
            .mes {
                background: rgba(0, 0, 0, 0.8);
                border: 1px solid var(--accent-neon);
                box-shadow: 0 0 20px var(--accent-neon);
                text-shadow: 0 0 5px currentColor;
            }
        `;
    }
    
    // 판타지 테마
    function getFantasyTheme() {
        return `
            :root {
                --bg-main: #1a1a2e;
                --text-main: #eee;
                --accent-magic: #9b59b6;
                --accent-gold: #f1c40f;
            }
            
            body {
                background: linear-gradient(135deg, #1a1a2e, #16213e);
                color: var(--text-main);
                font-family: 'Cinzel', serif;
            }
            
            .mes {
                background: linear-gradient(135deg, rgba(155, 89, 182, 0.1), rgba(241, 196, 15, 0.1));
                border: 1px solid var(--accent-magic);
                border-radius: 10px;
            }
        `;
    }
    
    // 미니멀리스트 테마
    function getMinimalistTheme() {
        return `
            :root {
                --bg-main: #ffffff;
                --text-main: #333333;
                --accent-minimal: #000000;
            }
            
            body {
                background: var(--bg-main);
                color: var(--text-main);
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            }
            
            .mes {
                background: transparent;
                border: none;
                border-bottom: 1px solid #eee;
                border-radius: 0;
                box-shadow: none;
            }
        `;
    }
    
    // 설정 저장
    function saveSettings() {
        const settings = {
            theme: document.getElementById('theme-select').value,
            effects: Array.from(activeEffects),
            colors: {
                primary: document.getElementById('primary-color').value,
                background: document.getElementById('bg-color').value,
                text: document.getElementById('text-color').value
            },
            customCSS: document.getElementById('custom-css').value,
            backgroundImage: document.getElementById('bg-url-input').value
        };
        
        localStorage.setItem('enhancedThemeSettings', JSON.stringify(settings));
    }
    
    // 설정 불러오기
    function loadSavedSettings() {
        const savedSettings = localStorage.getItem('enhancedThemeSettings');
        
        if (savedSettings) {
            try {
                const settings = JSON.parse(savedSettings);
                
                // 테마 적용
                if (settings.theme) {
                    document.getElementById('theme-select').value = settings.theme;
                    applySelectedTheme();
                }
                
                // 효과 적용
                if (settings.effects) {
                    settings.effects.forEach(effect => {
                        const toggle = document.getElementById(effect);
                        if (toggle) {
                            toggle.checked = true;
                            toggleEffect(effect, true);
                        }
                    });
                }
                
                // 색상 적용
                if (settings.colors) {
                    document.getElementById('primary-color').value = settings.colors.primary || '#000000';
                    document.getElementById('bg-color').value = settings.colors.background || '#ffffff';
                    document.getElementById('text-color').value = settings.colors.text || '#000000';
                }
                
                // 커스텀 CSS 적용
                if (settings.customCSS) {
                    document.getElementById('custom-css').value = settings.customCSS;
                    applyCustomCSS();
                }
                
                // 배경 이미지 적용
                if (settings.backgroundImage) {
                    document.getElementById('bg-url-input').value = settings.backgroundImage;
                    applyBackground();
                }
                
                updateStatus('Previous settings loaded');
            } catch (error) {
                console.error('Error loading settings:', error);
            }
        }
    }
    
    // 특수 효과 스크립트 로드
    async function loadEffectScripts() {
        // 필요한 경우 외부 라이브러리 로드
        // 예: particles.js, parallax.js 등
    }
    
    // 상태 업데이트
    function updateStatus(message) {
        const statusElement = document.getElementById('theme-status');
        statusElement.textContent = message;
        
        // 3초 후 메시지 페이드아웃
        setTimeout(() => {
            statusElement.style.opacity = '0.5';
        }, 3000);
    }
    
    // 확장 프로그램 등록
    jQuery(async () => {
        const getContext = SillyTavern.getContext;
        const eventSource = getContext().eventSource;
        
        eventSource.on('extensions_loaded', init);
    });
})();
